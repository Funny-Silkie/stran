using Stran.Logics;
using System;
using System.IO;
using System.Linq;

namespace Stran.TableGenerator
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            if (args.Length == 0) args = new[] { "TableData" };

            (string path, int index)[] files = args.SelectMany(Directory.GetFiles, (_, x) => (x, int.TryParse(Path.GetFileNameWithoutExtension(x), out int index), index))
                                                   .Where(x => x.Item2)
                                                   .Select(x => (x.x, x.index))
                                                   .OrderBy(x => x.index)
                                                   .ToArray();
            using var writer = new CsWriter(new StreamWriter($"{nameof(GeneticCodeTable)}.Tables.cs"));

            writer.WriteLine("// !!WARNING!!");
            writer.WriteLine("// This file is automatically generated by TableGenerator.");
            writer.WriteLine("// Any changes are wiped.");
            writer.WriteLine();
            writer.WriteLine("using NA = Stran.Logics.NucleotideBase;");
            writer.WriteLine("using AA = Stran.Logics.AminoAcid;");
            writer.WriteLine();
            writer.BeginBlock("namespace Stran.Logics");
            {
                writer.BeginBlock("public partial class GeneticCodeTable");
                {
                    foreach ((string fileName, int index) in files)
                    {
                        var table = GeneticCodeTable.ReadText(fileName);
                        writer.WriteLine("/// <summary>");
                        writer.WriteLine($"/// ID={index}のテーブルを取得します。");
                        writer.WriteLine("/// </summary>");
                        writer.WriteLine($"public static {nameof(GeneticCodeTable)} Table{index} => _table{index} ??= Create{index}();");
                        writer.WriteLine();
                        writer.WriteLine($"private static {nameof(GeneticCodeTable)}? _table{index};");
                        writer.WriteLine();
                        writer.WriteLine("/// <summary>");
                        writer.WriteLine($"/// ID={index}のテーブルを初期化します。");
                        writer.WriteLine("/// </summary>");
                        writer.BeginBlock($"private static {nameof(GeneticCodeTable)} Create{index}()");
                        {
                            writer.BeginBlock("var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)");
                            {
                                foreach ((Triplet trp, AminoAcid aa) in table) writer.WriteLine($"[(NA.{trp.First}, NA.{trp.Second}, NA.{trp.Third})] = AA.{(aa == AminoAcid.End ? "End" : aa.ToString())},");
                            }
                            writer.EndBlock(";");
                            writer.WriteLine($"var result = new {nameof(GeneticCodeTable)}(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));");
                            foreach (Triplet trp in table.Starts) writer.WriteLine($"result.Starts.Add(new Triplet(NA.{trp.First}, NA.{trp.Second}, NA.{trp.Third}));");
                            foreach (Triplet trp in table.Ends) writer.WriteLine($"result.Ends.Add(new Triplet(NA.{trp.First}, NA.{trp.Second}, NA.{trp.Third}));");
                            writer.WriteLine("return result;");
                        }
                        writer.EndBlock();
                        writer.WriteLine();
                    }
                    writer.WriteLine("/// <summary>");
                    writer.WriteLine($"/// NCBIで定義されているテーブルを取得します。");
                    writer.WriteLine("/// </summary>");
                    writer.WriteLine("/// <param name=\"id\">テーブルのID</param>");
                    writer.WriteLine("/// <returns><paramref name=\"id\"/>に対応するテーブル</returns>");
                    writer.WriteLine("/// /// <exception cref=\"System.ArgumentOutOfRangeException\"><paramref name=\"id\"/>が無効</exception>");
                    writer.BeginBlock($"public static partial {nameof(GeneticCodeTable)} GetNcbiTable(int id)");
                    {
                        writer.BeginBlock($"return id switch");
                        foreach (var (_, index) in files) writer.WriteLine($"{index} => Table{index},");
                        writer.WriteLine($"_ => throw new System.ArgumentOutOfRangeException(nameof(id), $\"id'({{id}})'の遺伝暗号表は未定義です\"),");
                        writer.EndBlock(";");
                    }
                    writer.EndBlock();
                }
                writer.EndBlock();
            }
            writer.EndBlock();
        }
    }
}
