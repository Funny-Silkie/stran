// !!WARNING!!
// This file is automatically generated by TableGenerator.
// Any changes are wiped.

using NA = Stran.Logics.NucleotideBase;
using AA = Stran.Logics.AminoAcid;

namespace Stran.Logics
{
    public partial class GeneticCodeTable
    {
        /// <summary>
        /// ID=1のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table1 => _table1 ??= Create1();

        private static GeneticCodeTable? _table1;

        /// <summary>
        /// ID=1のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create1()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.C, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=2のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table2 => _table2 ??= Create2();

        private static GeneticCodeTable? _table2;

        /// <summary>
        /// ID=2のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create2()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.M,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.End,
                [(NA.A, NA.G, NA.G)] = AA.End,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.U));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.C));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.A));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            result.Ends.Add(new Triplet(NA.A, NA.G, NA.A));
            result.Ends.Add(new Triplet(NA.A, NA.G, NA.G));
            return result;
        }

        /// <summary>
        /// ID=3のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table3 => _table3 ??= Create3();

        private static GeneticCodeTable? _table3;

        /// <summary>
        /// ID=3のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create3()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.T,
                [(NA.C, NA.U, NA.C)] = AA.T,
                [(NA.C, NA.U, NA.A)] = AA.T,
                [(NA.C, NA.U, NA.G)] = AA.T,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.M,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.A));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=4のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table4 => _table4 ??= Create4();

        private static GeneticCodeTable? _table4;

        /// <summary>
        /// ID=4のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create4()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.A));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.C, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.U));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.C));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.A));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=5のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table5 => _table5 ??= Create5();

        private static GeneticCodeTable? _table5;

        /// <summary>
        /// ID=5のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create5()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.M,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.S,
                [(NA.A, NA.G, NA.G)] = AA.S,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.U));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.C));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.A));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=6のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table6 => _table6 ??= Create6();

        private static GeneticCodeTable? _table6;

        /// <summary>
        /// ID=6のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create6()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.Q,
                [(NA.U, NA.A, NA.G)] = AA.Q,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=9のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table9 => _table9 ??= Create9();

        private static GeneticCodeTable? _table9;

        /// <summary>
        /// ID=9のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create9()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.N,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.S,
                [(NA.A, NA.G, NA.G)] = AA.S,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=10のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table10 => _table10 ??= Create10();

        private static GeneticCodeTable? _table10;

        /// <summary>
        /// ID=10のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create10()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.C,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=11のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table11 => _table11 ??= Create11();

        private static GeneticCodeTable? _table11;

        /// <summary>
        /// ID=11のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create11()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.C, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.U));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.C));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.A));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=12のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table12 => _table12 ??= Create12();

        private static GeneticCodeTable? _table12;

        /// <summary>
        /// ID=12のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create12()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.S,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.C, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=13のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table13 => _table13 ??= Create13();

        private static GeneticCodeTable? _table13;

        /// <summary>
        /// ID=13のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create13()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.M,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.G,
                [(NA.A, NA.G, NA.G)] = AA.G,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.A));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=14のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table14 => _table14 ??= Create14();

        private static GeneticCodeTable? _table14;

        /// <summary>
        /// ID=14のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create14()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.Y,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.N,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.S,
                [(NA.A, NA.G, NA.G)] = AA.S,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=16のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table16 => _table16 ??= Create16();

        private static GeneticCodeTable? _table16;

        /// <summary>
        /// ID=16のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create16()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.L,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=21のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table21 => _table21 ??= Create21();

        private static GeneticCodeTable? _table21;

        /// <summary>
        /// ID=21のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create21()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.M,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.N,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.S,
                [(NA.A, NA.G, NA.G)] = AA.S,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=22のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table22 => _table22 ??= Create22();

        private static GeneticCodeTable? _table22;

        /// <summary>
        /// ID=22のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create22()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.End,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.L,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.C, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=23のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table23 => _table23 ??= Create23();

        private static GeneticCodeTable? _table23;

        /// <summary>
        /// ID=23のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create23()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.End,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.U));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.U, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=24のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table24 => _table24 ??= Create24();

        private static GeneticCodeTable? _table24;

        /// <summary>
        /// ID=24のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create24()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.S,
                [(NA.A, NA.G, NA.G)] = AA.K,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.C, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=25のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table25 => _table25 ??= Create25();

        private static GeneticCodeTable? _table25;

        /// <summary>
        /// ID=25のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create25()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.G,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=26のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table26 => _table26 ??= Create26();

        private static GeneticCodeTable? _table26;

        /// <summary>
        /// ID=26のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create26()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.End,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.A,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.C, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=27のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table27 => _table27 ??= Create27();

        private static GeneticCodeTable? _table27;

        /// <summary>
        /// ID=27のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create27()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.Q,
                [(NA.U, NA.A, NA.G)] = AA.Q,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=28のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table28 => _table28 ??= Create28();

        private static GeneticCodeTable? _table28;

        /// <summary>
        /// ID=28のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create28()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.Q,
                [(NA.U, NA.A, NA.G)] = AA.Q,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=29のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table29 => _table29 ??= Create29();

        private static GeneticCodeTable? _table29;

        /// <summary>
        /// ID=29のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create29()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.Y,
                [(NA.U, NA.A, NA.G)] = AA.Y,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=30のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table30 => _table30 ??= Create30();

        private static GeneticCodeTable? _table30;

        /// <summary>
        /// ID=30のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create30()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.E,
                [(NA.U, NA.A, NA.G)] = AA.E,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.End,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.G, NA.A));
            return result;
        }

        /// <summary>
        /// ID=31のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table31 => _table31 ??= Create31();

        private static GeneticCodeTable? _table31;

        /// <summary>
        /// ID=31のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create31()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.E,
                [(NA.U, NA.A, NA.G)] = AA.E,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.R,
                [(NA.A, NA.G, NA.G)] = AA.R,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.A));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// ID=33のテーブルを取得します。
        /// </summary>
        public static GeneticCodeTable Table33 => _table33 ??= Create33();

        private static GeneticCodeTable? _table33;

        /// <summary>
        /// ID=33のテーブルを初期化します。
        /// </summary>
        private static GeneticCodeTable Create33()
        {
            var dictionary = new System.Collections.Generic.Dictionary<Triplet, AA>(CompatibleSize)
            {
                [(NA.U, NA.U, NA.U)] = AA.F,
                [(NA.U, NA.U, NA.C)] = AA.F,
                [(NA.U, NA.U, NA.A)] = AA.L,
                [(NA.U, NA.U, NA.G)] = AA.L,
                [(NA.U, NA.C, NA.U)] = AA.S,
                [(NA.U, NA.C, NA.C)] = AA.S,
                [(NA.U, NA.C, NA.A)] = AA.S,
                [(NA.U, NA.C, NA.G)] = AA.S,
                [(NA.U, NA.A, NA.U)] = AA.Y,
                [(NA.U, NA.A, NA.C)] = AA.Y,
                [(NA.U, NA.A, NA.A)] = AA.Y,
                [(NA.U, NA.A, NA.G)] = AA.End,
                [(NA.U, NA.G, NA.U)] = AA.C,
                [(NA.U, NA.G, NA.C)] = AA.C,
                [(NA.U, NA.G, NA.A)] = AA.W,
                [(NA.U, NA.G, NA.G)] = AA.W,
                [(NA.C, NA.U, NA.U)] = AA.L,
                [(NA.C, NA.U, NA.C)] = AA.L,
                [(NA.C, NA.U, NA.A)] = AA.L,
                [(NA.C, NA.U, NA.G)] = AA.L,
                [(NA.C, NA.C, NA.U)] = AA.P,
                [(NA.C, NA.C, NA.C)] = AA.P,
                [(NA.C, NA.C, NA.A)] = AA.P,
                [(NA.C, NA.C, NA.G)] = AA.P,
                [(NA.C, NA.A, NA.U)] = AA.H,
                [(NA.C, NA.A, NA.C)] = AA.H,
                [(NA.C, NA.A, NA.A)] = AA.Q,
                [(NA.C, NA.A, NA.G)] = AA.Q,
                [(NA.C, NA.G, NA.U)] = AA.R,
                [(NA.C, NA.G, NA.C)] = AA.R,
                [(NA.C, NA.G, NA.A)] = AA.R,
                [(NA.C, NA.G, NA.G)] = AA.R,
                [(NA.A, NA.U, NA.U)] = AA.I,
                [(NA.A, NA.U, NA.C)] = AA.I,
                [(NA.A, NA.U, NA.A)] = AA.I,
                [(NA.A, NA.U, NA.G)] = AA.M,
                [(NA.A, NA.C, NA.U)] = AA.T,
                [(NA.A, NA.C, NA.C)] = AA.T,
                [(NA.A, NA.C, NA.A)] = AA.T,
                [(NA.A, NA.C, NA.G)] = AA.T,
                [(NA.A, NA.A, NA.U)] = AA.N,
                [(NA.A, NA.A, NA.C)] = AA.N,
                [(NA.A, NA.A, NA.A)] = AA.K,
                [(NA.A, NA.A, NA.G)] = AA.K,
                [(NA.A, NA.G, NA.U)] = AA.S,
                [(NA.A, NA.G, NA.C)] = AA.S,
                [(NA.A, NA.G, NA.A)] = AA.S,
                [(NA.A, NA.G, NA.G)] = AA.K,
                [(NA.G, NA.U, NA.U)] = AA.V,
                [(NA.G, NA.U, NA.C)] = AA.V,
                [(NA.G, NA.U, NA.A)] = AA.V,
                [(NA.G, NA.U, NA.G)] = AA.V,
                [(NA.G, NA.C, NA.U)] = AA.A,
                [(NA.G, NA.C, NA.C)] = AA.A,
                [(NA.G, NA.C, NA.A)] = AA.A,
                [(NA.G, NA.C, NA.G)] = AA.A,
                [(NA.G, NA.A, NA.U)] = AA.D,
                [(NA.G, NA.A, NA.C)] = AA.D,
                [(NA.G, NA.A, NA.A)] = AA.E,
                [(NA.G, NA.A, NA.G)] = AA.E,
                [(NA.G, NA.G, NA.U)] = AA.G,
                [(NA.G, NA.G, NA.C)] = AA.G,
                [(NA.G, NA.G, NA.A)] = AA.G,
                [(NA.G, NA.G, NA.G)] = AA.G,
            };
            var result = new GeneticCodeTable(new System.Collections.ObjectModel.ReadOnlyDictionary<Triplet, AA>(dictionary));
            result.Starts.Add(new Triplet(NA.U, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.C, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.A, NA.U, NA.G));
            result.Starts.Add(new Triplet(NA.G, NA.U, NA.G));
            result.Ends.Add(new Triplet(NA.U, NA.A, NA.G));
            return result;
        }

        /// <summary>
        /// NCBIで定義されているテーブルを取得します。
        /// </summary>
        /// <param name="id">テーブルのID</param>
        /// <returns><paramref name="id"/>に対応するテーブル</returns>
        /// /// <exception cref="System.ArgumentOutOfRangeException"><paramref name="id"/>が無効</exception>
        public static partial GeneticCodeTable GetNcbiTable(int id)
        {
            return id switch
            {
                1 => Table1,
                2 => Table2,
                3 => Table3,
                4 => Table4,
                5 => Table5,
                6 => Table6,
                9 => Table9,
                10 => Table10,
                11 => Table11,
                12 => Table12,
                13 => Table13,
                14 => Table14,
                16 => Table16,
                21 => Table21,
                22 => Table22,
                23 => Table23,
                24 => Table24,
                25 => Table25,
                26 => Table26,
                27 => Table27,
                28 => Table28,
                29 => Table29,
                30 => Table30,
                31 => Table31,
                33 => Table33,
                _ => throw new System.ArgumentOutOfRangeException(nameof(id), $"id'({id})'の遺伝暗号表は未定義です"),
            };
        }
    }
}
